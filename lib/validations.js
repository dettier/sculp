////////////////////////////////////////////////////////////////////////////////
// REQUIRES : BEGIN
////////////////////////////////////////////////////////////////////////////////

import format from './i18n/format';
import { messages } from './i18n/lang';

import isRegExp from 'lodash-compat/lang/isRegExp';
import isNumber from 'lodash-compat/lang/isNumber';
import contains from 'lodash-compat/collection/contains';

import { PRESENCE } from './enums';

////////////////////////////////////////////////////////////////////////////////
// REQUIRES : END
////////////////////////////////////////////////////////////////////////////////

const validations = {

  //////////////////////////////////////////////////////////////////////////////
  // match
  //////////////////////////////////////////////////////////////////////////////

  match (fieldAccessor, rule) {
    if (!isRegExp(rule)) {
      rule = new RegExp(rule);
    }

    if (!rule.test(fieldAccessor())) {
      return format(messages.INVALID_VALUE_ERROR);
    }

    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // values
  //////////////////////////////////////////////////////////////////////////////

  values (fieldAccessor, rule) {
    if (!contains(rule, fieldAccessor())) {
      return format(messages.INVALID_VALUE_ERROR);
    }

    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // regexp
  //////////////////////////////////////////////////////////////////////////////

  regexp (fieldAccessor, rule) {
    if (rule.test(fieldAccessor()) === false) {
      return format(messages.INVALID_VALUE_ERROR);
    }

    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // length
  //////////////////////////////////////////////////////////////////////////////

  length (fieldAccessor, rule) {
    const value = fieldAccessor();
    const length = value && value.length;
    if ((rule.min != null) && length < rule.min) {
      return format(messages.LENGTH_MIN_ERROR, { length : rule.min });
    } else if ((rule.max != null) && length > rule.max) {
      return format(messages.LENGTH_MAX_ERROR, { length : rule.max });
    } else if (isNumber(rule) && length !== rule) {
      return format(messages.LENGTH_NE_ERROR, { length : rule });
    }
    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // lengthmin
  //////////////////////////////////////////////////////////////////////////////

  lengthmin (fieldAccessor, rule) {
    const value = fieldAccessor();
    const length = value && value.length;
    if (length < rule) {
      return format(messages.LENGTH_MIN_ERROR, { length : rule });
    }
    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // lengthmax
  //////////////////////////////////////////////////////////////////////////////

  lengthmax (fieldAccessor, rule) {
    const value = fieldAccessor();
    const length = value && value.length;
    if (length > rule) {
      return format(messages.LENGTH_MAX_ERROR, { length : rule });
    }
    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // min
  //////////////////////////////////////////////////////////////////////////////

  min (fieldAccessor, rule) {
    if (fieldAccessor() < rule) {
      return format(messages.MIN_ERROR, { value : rule });
    }
    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // max
  //////////////////////////////////////////////////////////////////////////////

  max (fieldAccessor, rule) {
    if (fieldAccessor() > rule) {
      return format(messages.MAX_ERROR, { value : rule });
    }
    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // ne
  //////////////////////////////////////////////////////////////////////////////

  ne (fieldAccessor, rule) {
    if (fieldAccessor() === rule) {
      return format(messages.NE_ERROR, { value : rule });
    }
    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // gt
  //////////////////////////////////////////////////////////////////////////////

  gt (fieldAccessor, rule) {
    if (fieldAccessor() <= rule) {
      return format(messages.GT_ERROR, { value : rule });
    }
    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // lt
  //////////////////////////////////////////////////////////////////////////////

  lt (fieldAccessor, rule) {
    if (fieldAccessor() >= rule) {
      return format(messages.LT_ERROR, { value : rule });
    }
    return undefined;
  },

  //////////////////////////////////////////////////////////////////////////////
  // presence
  //////////////////////////////////////////////////////////////////////////////

  presence (fieldAccessor, rule) {
    const value = fieldAccessor();
    if (rule === PRESENCE.REQUIRED && !(value != null)) {
      return format(messages.PRESENCE_REQUIRED_ERROR);
    } else if (rule === PRESENCE.ABSENT && (value != null)) {
      return format(messages.PRESENCE_ABSENT_ERROR);
    }
    return undefined;
  }
};

////////////////////////////////////////////////////////////////////////////////
// export
////////////////////////////////////////////////////////////////////////////////

export default validations;
